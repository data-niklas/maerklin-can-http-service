@startuml
skinparam useBetaStyle true
skinparam linetype ortho

<style>
    classDiagram{
        FontColor Black
        BackgroundColor White
        LineThickness 2
        LineColor Black
        RoundCorner 10
    }
</style>

class BaseModel{
}
class AbstractCANMessage{
hash_value: int
response: bool
}
abstract class AbstractCANMessage
BaseModel <|-- AbstractCANMessage
class CANMessage{
message_id: MessageIdentifier
data: str
}
BaseModel <|-- CANMessage
class AbstractLocIDCommand{
hash_value: int
response: bool
loc_id: int
}
abstract class AbstractLocIDCommand
AbstractCANMessage <|-- AbstractLocIDCommand
class LocomotiveSpeedCommand{
hash_value: int
response: bool
loc_id: int
speed: int
}
AbstractLocIDCommand <|-- LocomotiveSpeedCommand
class LocomotiveDirectionCommand{
hash_value: int
response: bool
loc_id: int
direction: LocomotiveDirection
}
AbstractLocIDCommand <|-- LocomotiveDirectionCommand
class LocomotiveFunctionCommand{
hash_value: int
response: bool
loc_id: int
function: int
value: int
function_value: int
}
AbstractLocIDCommand <|-- LocomotiveFunctionCommand
class ReadConfigCommand{
hash_value: int
response: bool
loc_id: int
index: int
number: int
count: int
value: int
}
AbstractLocIDCommand <|-- ReadConfigCommand
class WriteConfigControlByte{
is_main: bool
is_multi_byte: bool
dcc_programming: DCCProgramming
}
BaseModel <|-- WriteConfigControlByte
class WriteConfigResultByte{
is_write_successful: bool
is_verify_successful: bool
}
BaseModel <|-- WriteConfigResultByte
class WriteConfigCommand{
hash_value: int
response: bool
loc_id: int
index: int
number: int
value: int
control: WriteConfigControlByte
result: WriteConfigResultByte
}
AbstractLocIDCommand <|-- WriteConfigCommand
class SwitchingAccessoriesCommand{
hash_value: int
response: bool
loc_id: int
position: int
power: int
value: int
}
AbstractLocIDCommand <|-- SwitchingAccessoriesCommand
class S88PollingCommand{
hash_value: int
response: bool
loc_id: int
module_count: int
module: int
state: int
}
AbstractLocIDCommand <|-- S88PollingCommand
class AbstractSystemCommand{
hash_value: int
response: bool
id: int
}
abstract class AbstractSystemCommand
AbstractCANMessage <|-- AbstractSystemCommand
class SystemStopCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- SystemStopCommand
class SystemGoCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- SystemGoCommand
class SystemHaltCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- SystemHaltCommand
class LocomotiveEmergencyStopCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- LocomotiveEmergencyStopCommand
class LocomotiveCycleStopCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- LocomotiveCycleStopCommand
class LocomotiveDataProtocolCommand{
hash_value: int
response: bool
id: int
protocol: RailProtocolSchema
}
AbstractSystemCommand <|-- LocomotiveDataProtocolCommand
class AccessoryDecoderSwitchingTimeCommand{
hash_value: int
response: bool
id: int
time: int
}
AbstractSystemCommand <|-- AccessoryDecoderSwitchingTimeCommand
class MfxFastReadCommand{
hash_value: int
response: bool
id: int
mfx_sid: int
}
AbstractSystemCommand <|-- MfxFastReadCommand
class EnableRailProtocolCommand{
hash_value: int
response: bool
id: int
bitset: int
}
AbstractSystemCommand <|-- EnableRailProtocolCommand
class SetMfxRegisterCounterCommand{
hash_value: int
response: bool
id: int
counter: int
}
AbstractSystemCommand <|-- SetMfxRegisterCounterCommand
class SystemOverloadCommand{
hash_value: int
response: bool
id: int
channel: int
}
AbstractSystemCommand <|-- SystemOverloadCommand
class SystemStatusCommand{
hash_value: int
response: bool
id: int
channel: int
measured_value: int
}
AbstractSystemCommand <|-- SystemStatusCommand
class SetSystemIdentifierCommand{
hash_value: int
response: bool
id: int
system_id: int
}
AbstractSystemCommand <|-- SetSystemIdentifierCommand
class MfxSeekCommand{
hash_value: int
response: bool
id: int
}
AbstractSystemCommand <|-- MfxSeekCommand
class SystemResetCommand{
hash_value: int
response: bool
id: int
target: int
}
AbstractSystemCommand <|-- SystemResetCommand
class ParticipantPingCommand{
hash_value: int
response: bool
sender_id: int
software_version: int
device_id: int
}
AbstractCANMessage <|-- ParticipantPingCommand
class LocomotiveDiscoveryCommand{
hash_value: int
response: bool
loc_id: int
protocol: ProtocolSchema
mfx_range: int
ask_ratio: int
}
AbstractCANMessage <|-- LocomotiveDiscoveryCommand
class S88EventCommand{
hash_value: int
response: bool
device_id: int
contact_id: int
parameter: int
state_old: int
state_new: int
time: int
}
AbstractCANMessage <|-- S88EventCommand
class RequestConfigDataCommand{
hash_value: int
response: bool
filename: str
}
AbstractCANMessage <|-- RequestConfigDataCommand
class ServiceStatusDataConfigurationCommand{
hash_value: int
response: bool
device_id: int
index: int
count: int
data: str
}
AbstractCANMessage <|-- ServiceStatusDataConfigurationCommand
class ConfigDataStreamCommand{
hash_value: int
response: bool
file_length: int
crc: int
byte6: int
data: str
}
AbstractCANMessage <|-- ConfigDataStreamCommand
class BootloaderCANBoundCommand{
hash_value: int
response: bool
data: str
}
AbstractCANMessage <|-- BootloaderCANBoundCommand
class AbstractMfxCommand{
hash_value: int
response: bool
mfx_uid: int
mfx_sid: int
}
abstract class AbstractMfxCommand
AbstractCANMessage <|-- AbstractMfxCommand
class MfxBindCommand{
hash_value: int
response: bool
mfx_uid: int
mfx_sid: int
}
AbstractMfxCommand <|-- MfxBindCommand
class MfxVerifyCommand{
hash_value: int
response: bool
mfx_uid: int
mfx_sid: int
ask_ratio: int
}
AbstractMfxCommand <|-- MfxVerifyCommand
@enduml